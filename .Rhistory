summarize(max_temp = max(temp, na.rm = T)) %>%
ungroup() %>%
# Cool ridge plot
ggplot(aes(x = max_temp, y = month(date), height = ..density..)) +
ggridges::geom_density_ridges(stat = "density")
# Find maximum temperature by day
transmute(nashville_weather, date = as_date(ymd_hms(str_c("2010", date))), temp = hly_temp_normal, month = month(date, label = T)) %>%
group_by(date) %>%
summarize(max_temp = max(temp, na.rm = T)) %>%
ungroup() %>%
# Cool ridge plot
ggplot(aes(x = max_temp, y = month(date), height = ..density..)) +
ggridges::geom_density_ridges(stat = "density")
# Find maximum temperature by day
transmute(nashville_weather, date = as_date(ymd_hms(str_c("2010", date))), temp = hly_temp_normal, month = month(date, label = T)) %>%
group_by(date) %>%
summarize(max_temp = max(temp, na.rm = T)) %>%
ungroup() %>%
# Cool ridge plot
ggplot(aes(x = max_temp, y = month, height = ..density..)) +
ggridges::geom_density_ridges(stat = "density")
# Find maximum temperature by day
transmute(nashville_weather, date = as_date(ymd_hms(str_c("2010", date))), temp = hly_temp_normal,
weather_month = month(date, label = T)) %>%
group_by(date) %>%
summarize(max_temp = max(temp, na.rm = T)) %>%
ungroup() %>%
# Cool ridge plot
ggplot(aes(x = max_temp, y = weather_month, height = ..density..)) +
ggridges::geom_density_ridges(stat = "density")
# Find maximum temperature by day
transmute(nashville_weather, date = as_date(ymd_hms(str_c("2010", date))), temp = hly_temp_normal) %>%
group_by(date) %>%
summarize(max_temp = max(temp, na.rm = T)) %>%
ungroup() %>%
mutate(month = month(date, label = T)) %>%
# Cool ridge plot
ggplot(aes(x = max_temp, y = month, height = ..density..)) +
ggridges::geom_density_ridges(stat = "density")
list.files("N:/ORP_accountability/projects/2019_ready_graduate/Data")
rg = read_csv("N:/ORP_accountability/projects/2019_ready_graduate/Data/ready_graduate_student_level.csv")
# Set up
options(java.parameters = "-Xmx16G")
library(tidyverse)
library(lubridate)
library(haven)
setwd("C:/Users/CA19130/Documents/Projects/ECON 6110/")
rg = read_csv("N:/ORP_accountability/projects/2019_ready_graduate/Data/ready_graduate_student_level.csv")
filter(rg, student_key == 2906669)
filter(rg, student_key == 2906669) %>% View()
read_csv("N:/ORP_accountability/projects/2019_ready_graduate/Data/ready_graduate_student_level.csv") %>%
select(student_key, school_no, district_no, act_composite, industry_cert, n_de, ready_graduate) %>%
View()
read_csv("N:/ORP_accountability/projects/2019_ready_graduate/Data/ready_graduate_student_level.csv") %>%
filter(student_key == 2906669) %>%
select(student_key, school_no, district_no, act_composite, industry_cert, n_de, ready_graduate) %>%
View()
rm(rg)
setwd("N:/ORP_accountability")
library(tidyverse)
library(lubridate)
library(RJDBC)
# Connect to database and set directory
eis_con = dbConnect(JDBC("oracle.jdbc.OracleDriver", classPath="C:/Users/CA19130/Downloads/ojdbc6.jar"),
"jdbc:oracle:thin:@//ag03sdcprdsh2.dcsouth.tenn:1540/CAEISPRD",
"EIS_MGR", "N31aQw_8mXzPy_1")
sde_con = dbConnect(JDBC("oracle.jdbc.OracleDriver", classPath="C:/Users/CA19130/Downloads/ojdbc6.jar"),
"jdbc:oracle:thin:@//ag03sdcprdsh2.dcsouth.tenn:1540/CADOEPRD",
"SDE_DIR", "Sd3_D1r_VbtG_15")
as.tbl(
dbGetQuery(
eis_con,
"select *
from student_ready_grads"
)
)
rg = as.tbl(
dbGetQuery(
eis_con,
"select *
from student_ready_grads"
)
)
# Confirm that RG business rules are applied correctly
rg = as.tbl(
dbGetQuery(
eis_con,
"select *
from student_ready_grads"
)
)
rg
# Confirm that RG business rules are applied correctly
rg = as.tbl(
dbGetQuery(
eis_con,
"select *
from student_ready_grads"
)
) %>%
janitor::clean_names()
names(rg)
mutate_at(rg, vars(sat_math:participate_clg_lvl_pgm), funs(ifelse(is.na(.), 0, .)))
mutate_at(rg, vars(sat_math:participate_clg_lvl_pgm), funs(ifelse(is.na(.), 0, .))) %>%
mutate(should_be_rg = ifelse(sat_total >= 1060 | act_composite >= 21 |
industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 4 |
(asvab >= 31 & industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 2), "Y", "N"),
is_rg = ready_graduate)
mutate_at(rg, vars(sat_math:participate_clg_lvl_pgm), funs(ifelse(is.na(.), 0, .))) %>%
mutate(should_be_rg = ifelse(sat_total >= 1060 | act_composite >= 21 |
industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 4 |
(asvab >= 31 & industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 2), "Y", "N"),
is_rg = ready_graduate) %>%
group_by(should_be_rg, is_rg) %>%
summarize(n = n())
mutate_at(rg, vars(sat_math:participate_clg_lvl_pgm), funs(ifelse(is.na(.), 0, .))) %>%
mutate(should_be_rg = ifelse(sat_total >= 1060 | act_composite >= 21 |
industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 4 |
(asvab >= 31 & industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 2), "Y", "N"),
is_rg = ready_graduate) %>%
filter(should_be_rg == "N" & is_rg == "Y")
mutate_at(rg, vars(sat_math:participate_clg_lvl_pgm), funs(ifelse(is.na(.), 0, .))) %>%
mutate(should_be_rg = ifelse(sat_total >= 1060 | act_composite >= 21 |
industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 4 |
(asvab >= 31 & industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 2), "Y", "N"),
is_rg = ready_graduate) %>%
filter(should_be_rg == "N" & is_rg == "Y") %>%
View()
# Enrollments
enrollments = read_delim("Research and Policy/ORP_Data/Student_Assessment/Industry_Certs/Raw_Files/Industry Certification Full File from P20 20190208.txt",
delim = "\t") %>%
janitor::clean_names() %>%
mutate(student_key = as.numeric(student_id)) %>%
filter(!is.na(student_key) & !pass_fail %in% c("Fail", "FAIL", "No", "--")) %>%
mutate(essa_conversion_name = case_when(
cert_name == "1D0-520:CIW Web Design Specialist " ~ "CIW Web Design Specialist",
cert_name == "1D0-635:CIW JavaScript Specialist" ~ "JavaScript Specialist",
cert_name == "1D0-61C:CIW Network Technology Associate" ~ "Microsoft Technology Associate- Networking (Infrastructure)",
cert_name %in% c("Air Conditioning ER", "Air Conditioning") ~ "A/C",
str_detect(cert_name, "Carpentry 2") |
str_detect(cert_name, "Carpentry Level 2") |
str_detect(cert_name, "Carpentry Level Two")  ~ "NCCER Carpentry Level Two",
str_detect(cert_name, "Carpentry Level One")  ~ "NCCER Carpentry Level One",
cert_name == "CCMA" ~ "Certified Clinical Medical Assistant",
cert_name == "Certified Solidworks Associate (CSWA) - Academic" ~ "Certified Solidworks Associate (CSWA)-Academic",
str_detect(cert_name, "CompTIA A+") ~ "CompTIA A+",
str_detect(cert_name, "CompTIA IT Fundamentals") ~ "CompTIA IT Fundamentals",
str_detect(cert_name, "CompTIA Network+") ~ "CompTIA Network+",
str_detect(cert_name, "CompTIA Security+") ~ "CompTIA Security +",
str_detect(cert_name, "Core Curriculum") ~ "NCCER Core Curriculum", # make sure this is the right assumption
cert_name == "Electrical ER" ~ "Electrical",
cert_name == "Electrical Level One" ~ "NCCER Electrical Level One",
str_detect(cert_name, "H.E.A.T") ~ "HVAC Excellence, Heating, Electrical, Air Conditioning Technology (H.E.A.T.)",
str_detect(cert_name, "Gas Heat") ~ "Gas",
str_detect(cert_name, "Heat Pump") ~ "Heat Pumps",
cert_name == "Nonstructural Analysis & Damage Repair" ~ "Automotive Service Excellence Student Certification: Nonstructural Analysis/Repair",
str_detect(cert_name, "608") ~ "EPA Section 608 Universal",
cert_name == "Nurse Aide" ~ "Certified Nursing Aide",
str_detect(cert_name, "Nurition Science") ~ "Tennessee Specific Industry Certification: Dietetics and Nutrition",
cert_name == "Painting & Refinishing" ~ "Automotive Service Excellence Student Certification: Painting and Refinishing",
cert_name == "Plumbing Level One" ~ "NCCER Plumbing Level One",
cert_name == "Siemens MechatronicsSystem Certification Level 1" ~ "Level I Siemens Certified Mechatronic Systems Assistant",
cert_name == "Structural Analysis & Damage Repair" ~ "Automotive Service Excellence Student Certification: Structural Analysis/Repair",
cert_name == "TN_CNA" ~ "Certified Nursing Aide",
str_detect(cert_name, "Nutrition Science") ~ "Tennessee Specific Industry Certification: Dietetics and Nutrition",
cert_name == "TSIC for Animal Sci." ~ "Tennessee Specific Industry Certification: Animal Science",
str_detect(cert_name, "Welding Level 1") | str_detect(cert_name, "Welding Level One") ~
"American Welding Society SENSE Entry Level (1)",
cert_name == "Welding Level Two" ~ "American Welding Society SENSE Advanced Level (2)",
cert_name %in% c("Safety", "Quality", "Maintenance Awareness", "Processes and Production") ~ "Certified Production Certification (CPT)",
cert_name == "2022950L2" ~ "American Welding Society SENSE Advanced Level (2)",
cert_name %in% c("659507L1", "669416L1") ~ "American Welding Society SENSE Entry Level (1)",
cert_name == "EMR" ~ "Emergency Medical Responder (First Responder)",
cert_name %in% c("Gas Metal Arc Welding Certificate", "Shielded Metal Arc Welding Certificate") ~ "American Welding Society Certified Welder",
cert_name == "Maintenance & Light Repair" ~ "Automotive Service Excellence Student Certification: Maintenance & Light Repair Certification",
str_detect(cert_name, "Microsoft") & str_detect(cert_name, "Word") & !str_detect(cert_name, "Expert") ~ "Microsoft Office Specialist (Word Core)",
str_detect(cert_name, "Microsoft") & str_detect(cert_name, "Word") & str_detect(cert_name, "Expert") ~ "Microsoft Office Expert (pass the two-part Expert Exam in Word)",
str_detect(cert_name, "Microsoft") & str_detect(cert_name, "Excel") & !str_detect(cert_name, "Expert") ~ "Microsoft Office Specialist (Excel Core)",
str_detect(cert_name, "Microsoft") & str_detect(cert_name, "PowerPoint") & !str_detect(cert_name, "Expert") ~ "Microsoft Office Specialist (PowerPoint)",
cert_name %in% c("Foundational Knowledge", "Mid-level Technician") ~ "Certified Logistics Technician",
!is.na(cert_name) ~ cert_name
)) %>%
filter(!is.na(student_key))
setwd("N:/")
# Enrollments
enrollments = read_delim("Research and Policy/ORP_Data/Student_Assessment/Industry_Certs/Raw_Files/Industry Certification Full File from P20 20190208.txt",
delim = "\t") %>%
janitor::clean_names() %>%
mutate(student_key = as.numeric(student_id)) %>%
filter(!is.na(student_key) & !pass_fail %in% c("Fail", "FAIL", "No", "--")) %>%
mutate(essa_conversion_name = case_when(
cert_name == "1D0-520:CIW Web Design Specialist " ~ "CIW Web Design Specialist",
cert_name == "1D0-635:CIW JavaScript Specialist" ~ "JavaScript Specialist",
cert_name == "1D0-61C:CIW Network Technology Associate" ~ "Microsoft Technology Associate- Networking (Infrastructure)",
cert_name %in% c("Air Conditioning ER", "Air Conditioning") ~ "A/C",
str_detect(cert_name, "Carpentry 2") |
str_detect(cert_name, "Carpentry Level 2") |
str_detect(cert_name, "Carpentry Level Two")  ~ "NCCER Carpentry Level Two",
str_detect(cert_name, "Carpentry Level One")  ~ "NCCER Carpentry Level One",
cert_name == "CCMA" ~ "Certified Clinical Medical Assistant",
cert_name == "Certified Solidworks Associate (CSWA) - Academic" ~ "Certified Solidworks Associate (CSWA)-Academic",
str_detect(cert_name, "CompTIA A+") ~ "CompTIA A+",
str_detect(cert_name, "CompTIA IT Fundamentals") ~ "CompTIA IT Fundamentals",
str_detect(cert_name, "CompTIA Network+") ~ "CompTIA Network+",
str_detect(cert_name, "CompTIA Security+") ~ "CompTIA Security +",
str_detect(cert_name, "Core Curriculum") ~ "NCCER Core Curriculum", # make sure this is the right assumption
cert_name == "Electrical ER" ~ "Electrical",
cert_name == "Electrical Level One" ~ "NCCER Electrical Level One",
str_detect(cert_name, "H.E.A.T") ~ "HVAC Excellence, Heating, Electrical, Air Conditioning Technology (H.E.A.T.)",
str_detect(cert_name, "Gas Heat") ~ "Gas",
str_detect(cert_name, "Heat Pump") ~ "Heat Pumps",
cert_name == "Nonstructural Analysis & Damage Repair" ~ "Automotive Service Excellence Student Certification: Nonstructural Analysis/Repair",
str_detect(cert_name, "608") ~ "EPA Section 608 Universal",
cert_name == "Nurse Aide" ~ "Certified Nursing Aide",
str_detect(cert_name, "Nurition Science") ~ "Tennessee Specific Industry Certification: Dietetics and Nutrition",
cert_name == "Painting & Refinishing" ~ "Automotive Service Excellence Student Certification: Painting and Refinishing",
cert_name == "Plumbing Level One" ~ "NCCER Plumbing Level One",
cert_name == "Siemens MechatronicsSystem Certification Level 1" ~ "Level I Siemens Certified Mechatronic Systems Assistant",
cert_name == "Structural Analysis & Damage Repair" ~ "Automotive Service Excellence Student Certification: Structural Analysis/Repair",
cert_name == "TN_CNA" ~ "Certified Nursing Aide",
str_detect(cert_name, "Nutrition Science") ~ "Tennessee Specific Industry Certification: Dietetics and Nutrition",
cert_name == "TSIC for Animal Sci." ~ "Tennessee Specific Industry Certification: Animal Science",
str_detect(cert_name, "Welding Level 1") | str_detect(cert_name, "Welding Level One") ~
"American Welding Society SENSE Entry Level (1)",
cert_name == "Welding Level Two" ~ "American Welding Society SENSE Advanced Level (2)",
cert_name %in% c("Safety", "Quality", "Maintenance Awareness", "Processes and Production") ~ "Certified Production Certification (CPT)",
cert_name == "2022950L2" ~ "American Welding Society SENSE Advanced Level (2)",
cert_name %in% c("659507L1", "669416L1") ~ "American Welding Society SENSE Entry Level (1)",
cert_name == "EMR" ~ "Emergency Medical Responder (First Responder)",
cert_name %in% c("Gas Metal Arc Welding Certificate", "Shielded Metal Arc Welding Certificate") ~ "American Welding Society Certified Welder",
cert_name == "Maintenance & Light Repair" ~ "Automotive Service Excellence Student Certification: Maintenance & Light Repair Certification",
str_detect(cert_name, "Microsoft") & str_detect(cert_name, "Word") & !str_detect(cert_name, "Expert") ~ "Microsoft Office Specialist (Word Core)",
str_detect(cert_name, "Microsoft") & str_detect(cert_name, "Word") & str_detect(cert_name, "Expert") ~ "Microsoft Office Expert (pass the two-part Expert Exam in Word)",
str_detect(cert_name, "Microsoft") & str_detect(cert_name, "Excel") & !str_detect(cert_name, "Expert") ~ "Microsoft Office Specialist (Excel Core)",
str_detect(cert_name, "Microsoft") & str_detect(cert_name, "PowerPoint") & !str_detect(cert_name, "Expert") ~ "Microsoft Office Specialist (PowerPoint)",
cert_name %in% c("Foundational Knowledge", "Mid-level Technician") ~ "Certified Logistics Technician",
!is.na(cert_name) ~ cert_name
)) %>%
filter(!is.na(student_key))
filter(enrollments, student_key == 3294987
)
# ESSA conversion crosswalk
xw = readxl::read_excel("ORP_accountability/projects/2019_ready_graduate/Code/Crosswalks/Cert Names RG1.xlsx",
sheet = 2) %>%
janitor::clean_names() %>%
filter(promoted == "x") %>%
transmute(cert_name, source_file, new_cert, pass_fail)
essa = read_csv("ORP_accountability/projects/2019_ready_graduate/Code/Crosswalks/industry_certification_conversion.csv")
# Course enrollments
c = filter(cohort, included_in_cohort == "Y" & completion_type %in% c(1, 11, 12, 13)) %>%
select(student_key) %>%
inner_join(enrollments, by = "student_key") %>%
# Only those on the approved list
left_join(xw, by = c("cert_name", "source_file")) %>%
# Assign appropriate number of EPSOs
left_join(essa, by = c("essa_conversion_name" = "cert_name")) %>%
left_join(essa, by = c("new_cert" = "cert_name")) %>%
mutate(n_epso = ifelse(is.na(n_epso.x), ifelse(is.na(n_epso.y), NA, n_epso.y), n_epso.x)) %>%
select(-contains("n_epso.")) %>%
# Only include students who passed
filter(is.na(pass_fail.y) | pass_fail.y == "Pass" |
(as.integer(test_score) >= 70 & str_detect(pass_fail.y, "70")))
# Cohort
cohort = read_csv(str_c("ORP_accountability/data/", year(today()) - 1, "_graduation_rate/student_level.csv"),
col_types = "dccccTccTdcccccccdcdddcddcTcccdccccccdcTcccdTc")
# Course enrollments
c = filter(cohort, included_in_cohort == "Y" & completion_type %in% c(1, 11, 12, 13)) %>%
select(student_key) %>%
inner_join(enrollments, by = "student_key") %>%
# Only those on the approved list
left_join(xw, by = c("cert_name", "source_file")) %>%
# Assign appropriate number of EPSOs
left_join(essa, by = c("essa_conversion_name" = "cert_name")) %>%
left_join(essa, by = c("new_cert" = "cert_name")) %>%
mutate(n_epso = ifelse(is.na(n_epso.x), ifelse(is.na(n_epso.y), NA, n_epso.y), n_epso.x)) %>%
select(-contains("n_epso.")) %>%
# Only include students who passed
filter(is.na(pass_fail.y) | pass_fail.y == "Pass" |
(as.integer(test_score) >= 70 & str_detect(pass_fail.y, "70")))
filter(c, student_key == 3294987)
read_csv("N:/ORP_accountability/projects/2019_ready_graduate/Data/ic_student_level.csv") %>% filter(student_key == 3294987)
mutate_at(rg, vars(sat_math:participate_clg_lvl_pgm), funs(ifelse(is.na(.), 0, .))) %>%
mutate(should_be_rg = ifelse(sat_total >= 1060 | act_composite >= 21 |
industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 4 |
(asvab >= 31 & industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 2), "Y", "N"),
is_rg = ready_graduate) %>%
filter(should_be_rg == "N" & is_rg == "Y") %>%
View()
filter(rg, student_key == 3294987)
filter(rg, student_key == 3294987) %>% View()
mutate_at(rg, vars(sat_math:participate_clg_lvl_pgm), funs(ifelse(is.na(.), 0, .))) %>%
mutate(should_be_rg = ifelse(sat_total >= 1060 | act_composite >= 21 |
industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 4 |
(asvab >= 31 & industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 2), "Y", "N"),
is_rg = ready_graduate) %>%
filter(should_be_rg == "Y" & is_rg == "N") %>%
# View()
group_by(should_be_rg, is_rg) %>%
summarize(n = n())
mutate_at(rg, vars(sat_math:participate_clg_lvl_pgm), funs(ifelse(is.na(.), 0, .))) %>%
mutate(should_be_rg = ifelse(sat_total >= 1060 | act_composite >= 21 |
industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 4 |
(asvab >= 31 & industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 2), "Y", "N"),
is_rg = ready_graduate) %>%
# filter(should_be_rg == "Y" & is_rg == "N") %>%
# View()
group_by(should_be_rg, is_rg) %>%
summarize(n = n())
mutate_at(rg, vars(sat_math:participate_clg_lvl_pgm), funs(ifelse(is.na(.), 0, .))) %>%
mutate(should_be_rg = ifelse(sat_total >= 1060 | act_composite >= 21 |
industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 4 |
(asvab >= 31 & industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 2), "Y", "N"),
is_rg = ready_graduate) %>%
filter(should_be_rg == "Y" & is_rg == "N") %>%
View()
mutate_at(rg, vars(sat_math:participate_clg_lvl_pgm), funs(ifelse(is.na(.), 0, .))) %>%
mutate(should_be_rg = ifelse(sat_total >= 1060 | act_composite >= 21 |
industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 4 |
(asvab >= 31 & industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 2), "Y", "N"),
is_rg = ready_graduate) %>%
filter(should_be_rg == "Y" & is_rg == "N") %>%
select(student_key)
mutate_at(rg, vars(sat_math:participate_clg_lvl_pgm), funs(ifelse(is.na(.), 0, .))) %>%
mutate(should_be_rg = ifelse(sat_total >= 1060 | act_composite >= 21 |
industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 4 |
(asvab >= 31 & industry_cert_earned + n_cambridge + n_adv_placement +
n_inter_baccalaureate + n_statewide_dual_credit +
n_local_dual_credit + n_dual_enrollment + participate_clg_lvl_pgm >= 2), "Y", "N"),
is_rg = ready_graduate) %>%
filter(should_be_rg == "Y" & is_rg == "N") %>%
transmute(str_c(student_key, " (", district_no, ")"))
rg
filter(rg, student_key == 3294987) %>% View()
read_csv("N:/ORP_accountability/projects/2019_ready_graduate/Data/ready_graduate_student_level.csv") %>%
filter(student_key == 3294987) %>%
View()
??json
# Data
read_json("https://data.nashville.gov/resource/8v95-enfj.json")
??read_json
# Data
jsonlite::read_json("https://data.nashville.gov/resource/8v95-enfj.json")
# Data
jsonlite::fromJSON("https://data.nashville.gov/resource/8v95-enfj.json")
# Data
as.tbl(jsonlite::fromJSON("https://data.nashville.gov/resource/8v95-enfj.json"))
# Data
as.tbl(jsonlite::fromJSON("https://data.nashville.gov/resource/8v95-enfj.json")) %>%
View()
# Data
bus_stops = as.tbl(jsonlite::fromJSON("https://data.nashville.gov/resource/8v95-enfj.json"))
bus_stops
??fromJSON
read_csv("https://data.nashville.gov/resource/8v95-enfj.csv")
library(RSocrata)
rm(list = ls())
# Data
read.socrata("https://data.nashville.gov/resource/8v95-enfj.json",
app_token = "NGDGkaDGNtbMPUX6JB3z4rsdp",
email = "kramer.evan@gmail.com",
password = "!Zl*N449")
# Data
as.tbl(read.socrata("https://data.nashville.gov/resource/8v95-enfj.json",
app_token = "NGDGkaDGNtbMPUX6JB3z4rsdp",
email = "kramer.evan@gmail.com",
password = "!Zl*N449"))
# Data
bus_stops = as.tbl(read.socrata("https://data.nashville.gov/resource/8v95-enfj.json",
app_token = "NGDGkaDGNtbMPUX6JB3z4rsdp",
email = "kramer.evan@gmail.com",
password = "!Zl*N449"))
bus_stops$geocoded_column.coordinates[1]
bus_stops$geocoded_column.coordinates[[1]][1]
bus_stops$latitude = bus_stops$geocoded_column.coordinates[[1]][1]
View(bus_stops)
bus_stops$longitude = bus_stops$geocoded_column.coordinates[[1]][2]
ls()
"pwd" %in% ls()
!"pwd" %in% ls()
source('~/Projects/ECON 6110/Assignments/Research Paper/research_paper.R')
building_permits
mnps_locations = as.tbl(
read.socrata("https://data.nashville.gov/resource/6ebp-w58k.json",
app_token = "NGDGkaDGNtbMPUX6JB3z4rsdp",
email = "kramer.evan@gmail.com",
password = pwd)
)
mnps_locations
mnps_demographics = as.tbl(
read.socrata("https://data.nashville.gov/resource/7viv-byqi.json",
app_token = "NGDGkaDGNtbMPUX6JB3z4rsdp",
email = "kramer.evan@gmail.com",
password = pwd)
)
mnps_demographics
parks = as.tbl(
read.socrata("https://data.nashville.gov/resource/xbru-cfzi.json",
app_token = "NGDGkaDGNtbMPUX6JB3z4rsdp",
email = "kramer.evan@gmail.com",
password = pwd)
)
parks
crashes = as.tbl(
read.socrata("https://data.nashville.gov/resource/dab3-bu4j.json",
app_token = "NGDGkaDGNtbMPUX6JB3z4rsdp",
email = "kramer.evan@gmail.com",
password = pwd)
)
crashes
crime = as.tbl(
read.socrata("https://data.nashville.gov/resource/napa-nfy2.json",
app_token = "NGDGkaDGNtbMPUX6JB3z4rsdp",
email = "kramer.evan@gmail.com",
password = pwd)
)
crime
source('~/Projects/ECON 6110/Assignments/Research Paper/research_paper.R')
crashes
View(crashes)
table(crashes$property_damage)
# Model to predict crashes
lm(number_of_injuries ~ number_of_motor_vehicles + weather + lighting, crashes)
# Model to predict crashes
lm(number_of_injuries ~ number_of_motor_vehicles + weather + collision_type + illumination, crashes)
# Model to predict crashes
summary(lm(number_of_injuries ~ number_of_motor_vehicles + weather + collision_type + illumination, crashes))
# Model to predict crashes
summary(lm(number_of_injuries ~ number_of_motor_vehicles + weather + collision_type + illumination + precinct, crashes))
# Model to predict crashes
summary(lm(number_of_injuries ~ number_of_motor_vehicles + weather + collision_type + illumination + precinct + property_damage,
crashes))
# Model to predict crashes
summary(lm(number_of_injuries ~ number_of_motor_vehicles + weather + collision_type + illumination + precinct,
crashes))
crime
credit_cards = as.tbl(
read.socrata("https://data.nashville.gov/resource/ucyr-mx6r.json",
app_token = "NGDGkaDGNtbMPUX6JB3z4rsdp",
email = "kramer.evan@gmail.com",
password = pwd)
)
credit_cards
View(credit_cards)
metro_salaries = as.tbl(
read.socrata("https://data.nashville.gov/resource/7saa-4q7b.json",
app_token = "NGDGkaDGNtbMPUX6JB3z4rsdp",
email = "kramer.evan@gmail.com",
password = pwd)
)
metro_salaries
View(metro_salaries)
ggplot(metro_salaries, aes(regular_pay)) + geom_histogram()
ggplot(metro_salaries, aes(x = regular_pay)) + geom_histogram()
ggplot(metro_salaries, aes(as.numeric(regular_pay))) + geom_histogram()
ggplot(metro_salaries, aes(as.numeric(regular_pay))) + geom_histogram() + scale_x_continuous(breaks = seq(0, 350000, by = 10000))
ggplot(metro_salaries, aes(as.numeric(regular_pay))) + geom_histogram() + scale_x_continuous(labels =  = seq(0, 350000, by = 10000))
ggplot(metro_salaries, aes(as.numeric(regular_pay))) + geom_histogram() + scale_x_continuous(labels = seq(0, 350000, by = 10000))
ggplot(metro_salaries, aes(as.numeric(regular_pay))) + geom_histogram() + scale_x_continuous(breaks = seq(0, 350000, by = 10000))
readxl::read_excel("https://www.tn.gov/content/dam/tn/education/data/profile/district_profile_2017-18.xlsx")
readxl::read_excel("http://www.tn.gov/content/dam/tn/education/data/profile/district_profile_2017-18.xlsx")
??read.xlsx
openxlsx::read.xlsx("https://www.tn.gov/content/dam/tn/education/data/profile/district_profile_2017-18.xlsx")
as.tbl(openxlsx::read.xlsx("https://www.tn.gov/content/dam/tn/education/data/profile/district_profile_2017-18.xlsx")) %>%
janitor::clean_names()
adm
adm = as.tbl(openxlsx::read.xlsx("https://www.tn.gov/content/dam/tn/education/data/profile/district_profile_2017-18.xlsx")) %>%
janitor::clean_names()
adm
(adm = as.tbl(openxlsx::read.xlsx("https://www.tn.gov/content/dam/tn/education/data/profile/district_profile_2017-18.xlsx")) %>%
janitor::clean_names())
(adm = as.tbl(openxlsx::read.xlsx("https://www.tn.gov/content/dam/tn/education/data/profile/district_profile_2017-18.xlsx")) %>%
janitor::clean_names()) %>%
select(starts_with("district"), adm = average_daily_membership, ends_with("_pct"),
administrators:state_state_funding_pct)
